{"version":3,"sources":["index.js"],"names":["Square","props","className","winnerStatus","onClick","value","Board","i","winner","this","includes","squares","rowNum","concat","renderSquare","renderCol","renderRow","Component","Game","state","history","Array","fill","stepNumber","lastCell","xIsNext","isAscending","slice","length","calculateWinner","setState","step","move","cellNum","row","Math","floor","col","status","classN","current","moves","map","desc","colAndRow","key","jumpTo","reverse","drawCheck","handleClick","handleSortToggle","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.951bb475.chunk.js","sourcesContent":["import React,{Component} from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nfunction Square(props){\n  let className = \"square\"\n  if(props.winnerStatus){\n    className = \"square winner\"\n  }\n  return(\n    <button className={className} onClick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n\n\nclass Board extends Component {\n  renderSquare(i) {\n    let winnerStatus = false\n    let winner = this.props.winner\n    if(winner && winner.includes(i)){\n      winnerStatus = true\n    }\n\n    return(\n      <Square\n         winnerStatus = {winnerStatus}\n         value={this.props.squares[i]}\n         onClick = {()=>this.props.onClick(i)}\n    />\n  )}\n\n  renderCol(rowNum){\n    let squares = []\n    for(let i=0;i<3;i++){\n      squares = squares.concat(this.renderSquare(i+(rowNum*3)))\n    }\n    return squares\n  }\n\n  renderRow(rowNum){\n    return(<div className=\"board-row\">{this.renderCol(rowNum)}</div>)\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderRow(0)}\n        {this.renderRow(1)}\n        {this.renderRow(2)}\n      </div>\n    );\n  }\n}\n\nclass Game extends Component {\n  constructor(props){\n    super(props);\n      this.state = {\n        history:[{\n          squares: Array(9).fill(null)\n        }],\n        stepNumber: 0,\n        lastCell:[],\n        xIsNext: true,\n        isAscending:true,\n      }\n    }\n\n    handleClick(i){\n      const history = this.state.history.slice(0,this.state.stepNumber + 1)\n      const current = history[history.length-1]\n      const squares = current.squares.slice()\n      const lastCell = this.state.lastCell.slice(0,this.state.stepNumber)\n      if(calculateWinner(squares) || squares[i]){\n        return\n      }\n\n      squares[i] = this.state.xIsNext?\"X\":\"O\";\n      this.setState({\n        history:history.concat([{\n          squares:squares,\n        }]),\n        stepNumber:history.length,\n        lastCell:lastCell.concat(i),\n        xIsNext:!this.state.xIsNext,\n      })\n    }\n\n    jumpTo(step){\n      this.setState({\n        stepNumber:step,\n        xIsNext:(step%2)===0\n      })\n    }\n\n    colAndRow(move){\n      let cellNum = this.state.lastCell[move-1]\n      let row = Math.floor(cellNum/3) + 1\n      let col = Math.floor(cellNum%3) + 1\n\n      return(`  (${col}, ${row})`)\n    }\n\n    handleSortToggle(){\n      this.setState({isAscending:!this.state.isAscending})\n    }\n\n  render(){\n    let classN = \"None\"\n    const history = this.state.history\n    const current = history[this.state.stepNumber]\n    const winner = calculateWinner(current.squares)\n    const moves = history.map((step,move)=>{\n      const desc = move?\n      \"Go to move #\" + move +this.colAndRow(move):\n      \"Go to game start\"\n      if(move===history.length-1){\n        classN = \"bold\"\n      }\n      return(\n        <li key={move}>\n          <button className={classN} onClick={()=>(this.jumpTo(move))}>{desc}</button>\n        </li>\n      )\n    })\n\n    const isAscending = this.state.isAscending\n    if(!isAscending){\n      moves.reverse()\n    }\n\n    let status;\n    if(winner){\n      status = \"The winner is: \" + current.squares[winner[0]]\n    }else if(drawCheck(current.squares)){\n      status = \"Draw!!\"\n    }else{\n      status = \"Next player is: \" + (this.state.xIsNext?\"X\":\"O\")\n    }\n\n    // let button;\n    // if(this.state.isAscending){\n    //   button = <button>Descend</button>\n    // }else{\n    //   button = <button>Ascend</button>\n    // }\n\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            winner = {winner}\n            squares={current.squares}\n            onClick={(i)=>this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <button onClick={()=>this.handleSortToggle()}>\n            {this.state.isAscending?'Descend':'Ascend'}\n          </button>\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares){\n  const lines = [\n    [0,1,2],\n    [3,4,5],\n    [6,7,8],\n    [0,3,6],\n    [1,4,7],\n    [2,5,8],\n    [0,4,8],\n    [2,4,6]\n  ];\n    for (let i=0; i<lines.length; i++){\n      const [a,b,c] = lines[i]\n      if(squares[a] && squares[a]===squares[b] && squares[a]===squares[c]){\n        return [a,b,c]\n      }\n    }\n    return null\n}\n\nfunction drawCheck(squares){\n  for(let i=0;i<9;i++){\n    if(squares[i]===null){\n      return false\n    }\n  }\n  return true\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}